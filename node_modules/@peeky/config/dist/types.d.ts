import type { InlineConfig as ViteConfig } from 'vite';
import type { Arrayable, Awaitable } from '@peeky/utils';
export declare type ModuleFilter = string | RegExp | ((absolutePath: string) => boolean);
export declare type ModuleFilterOption<T = ModuleFilter> = T[] | T;
export declare type SerializableModuleFilter = string | RegExp;
export declare type SerializableRuntimeEnv = 'node' | 'dom';
export declare type BuiltinReporter = 'console-fancy' | 'console-json';
export interface PeekyConfig {
    targetDirectory?: string;
    match?: string | string[];
    ignored?: string | string[];
    watchMatch?: string | string[];
    watchBaseDirectory?: string;
    watchIgnored?: string | string[];
    watchThrottle?: number;
    maxWorkers?: number;
    emptySuiteError?: boolean;
    collectCoverage?: boolean;
    coverageOptions?: C8Options;
    runtimeEnv?: SerializableRuntimeEnv | typeof TestEnvironmentBase;
    runtimeAvailableEnvs?: Record<string, typeof TestEnvironmentBase>;
    mockFs?: boolean;
    buildExclude?: ModuleFilterOption;
    buildInclude?: ModuleFilterOption;
    vite?: ViteConfig;
    viteConfigFile?: string;
    reporters?: BuiltinReporter[];
    setupFiles?: string[];
    isolate?: boolean;
    previewSetupFiles?: string[];
}
export declare type SerializablePeekyConfig = Omit<PeekyConfig, 'runtimeEnv' | 'runtimeAvailableEnvs' | 'buildExclude' | 'buildInclude' | 'vite'> & {
    runtimeEnv?: SerializableRuntimeEnv;
    buildExclude?: ModuleFilterOption<SerializableModuleFilter>;
    buildInclude?: ModuleFilterOption<SerializableModuleFilter>;
};
export declare type ProgramPeekyConfig = SerializablePeekyConfig & {
    vite?: PeekyConfig['vite'];
};
export interface TestEnvironmentContext {
    testPath: string;
    pragma: Record<string, any>;
}
export declare abstract class TestEnvironmentBase {
    envName: string;
    protected config: PeekyConfig;
    protected context: TestEnvironmentContext;
    constructor(envName: string, config: PeekyConfig, context: TestEnvironmentContext);
    abstract create(): Awaitable<void>;
    abstract getResult(): Awaitable<any>;
    abstract destroy(): Awaitable<void>;
}
export declare type InstantiableTestEnvironmentClass = {
    new (...args: ConstructorParameters<typeof TestEnvironmentBase>): TestEnvironmentBase;
};
export declare type CoverageReporter = 'clover' | 'cobertura' | 'html-spa' | 'html' | 'json-summary' | 'json' | 'lcov' | 'lcovonly' | 'none' | 'teamcity' | 'text-lcov' | 'text-summary' | 'text';
export interface C8Options {
    /**
     * Directory to write coverage report to
     */
    reportsDirectory?: string;
    /**
     * Reporters
     *
     * @default 'text'
     */
    reporter?: Arrayable<CoverageReporter>;
    /**
     * Exclude coverage under /node_modules/
     *
     * @default true
     */
    excludeNodeModules?: boolean;
    exclude?: string[];
    include?: string[];
    skipFull?: boolean;
    extension?: string | string[];
    all?: boolean;
}
declare module 'vite' {
    interface UserConfig {
        /**
         * Peeky configuration
         */
        test?: SerializablePeekyConfig;
    }
}
