/// <reference types="node" />
import type { FetchResult, ViteNodeResolveId } from 'vite-node';
import { TestFlag } from './types.js';
import { Snapshot } from './snapshot/types.js';
export interface WorkerRemoteMethods {
    onCollected: (suites: SuiteCollectData[]) => void;
    onSuiteStart: (suite: SuiteStartData) => void;
    onSuiteComplete: (suite: SuiteCompleteData, duration: number, completedTests: Record<string, number>) => void;
    onTestError: (suiteId: string, testId: string, duration: number, error: TestErrorData) => void;
    onTestSnapshotsProcessed: (suiteId: string, testId: string, snapshots: Snapshot[]) => void;
    onTestEnvResult: (suiteId: string, testId: string, envResult: any) => void;
    onLog: (suiteId: string, testId: string, type: 'stdout' | 'stderr', text: string, file?: string) => void;
    fetchModule: (id: string) => Promise<FetchResult>;
    resolveId: (id: string, importer?: string) => Promise<ViteNodeResolveId | null>;
    testFileCompleteHandshake: () => Promise<void>;
}
export interface TestErrorData {
    message: string;
    stack: string;
    data: any;
    matcherResult: any;
}
export interface SuiteCollectData {
    id: string;
    title: string;
    allTitles: string[];
    flag: TestFlag;
    filePath: string;
    children: SuiteChildCollectData[];
    runTestCount: number;
}
export interface TestCollectData {
    id: string;
    title: string;
    flag: TestFlag;
}
export declare type SuiteChildCollectData = ['suite', SuiteCollectData] | ['test', TestCollectData];
export interface SuiteStartData {
    id: string;
}
export interface SuiteCompleteData {
    id: string;
    testErrors: number;
    otherErrors: Error[];
}
export declare type WorkerMessage<K extends keyof WorkerRemoteMethods = keyof WorkerRemoteMethods> = K extends any ? {
    id: string;
    method: K;
    args: Parameters<WorkerRemoteMethods[K]>;
} : never;
export interface MainMessageResult {
    id: string;
    result: any;
}
export interface MainMessageError {
    id: string;
    error: Error;
}
export declare type MainMessage = MainMessageResult | MainMessageError;
export declare type WorkerMessageHandler = (message: WorkerMessage) => unknown;
export declare function useWorkerMessages(): {
    onMessage: (handler: WorkerMessageHandler) => void;
    clearOnMessage: () => void;
    handleMessage: (message: WorkerMessage) => Promise<void>;
};
export declare function createWorkerChannel(methods: Partial<WorkerRemoteMethods>, handleMessage: (message: WorkerMessage) => unknown): {
    mainPort: import("worker_threads").MessagePort;
    workerPort: import("worker_threads").MessagePort;
};
