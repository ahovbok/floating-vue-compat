import { MessageChannel } from 'worker_threads';
export function useWorkerMessages() {
    const eventHandlers = [];
    function onMessage(handler) {
        eventHandlers.push(handler);
    }
    function clearOnMessage() {
        eventHandlers.length = 0;
    }
    async function handleMessage(message) {
        for (const handler of eventHandlers) {
            try {
                await handler(message);
            }
            catch (e) {
                console.error(`An error occured while handling message`, message);
                console.error(e);
            }
        }
    }
    return {
        onMessage,
        clearOnMessage,
        handleMessage,
    };
}
export function createWorkerChannel(methods, handleMessage) {
    const channel = new MessageChannel();
    const mainPort = channel.port2;
    const workerPort = channel.port1;
    mainPort.on('message', async (message) => {
        if (methods[message.method]) {
            try {
                // @ts-expect-error TypeScript is dumb
                const result = await methods[message.method](...message.args);
                if (!message.method.startsWith('on')) {
                    mainPort.postMessage({
                        id: message.id,
                        result,
                    });
                }
            }
            catch (e) {
                mainPort.postMessage({
                    id: message.id,
                    error: e,
                });
            }
        }
        handleMessage(message);
    });
    return {
        mainPort,
        workerPort,
    };
}
