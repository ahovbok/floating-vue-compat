import { basename, extname } from 'pathe';
import { nanoid } from 'nanoid';
import slugify from 'slugify';
import { toMainThread } from './message.js';
const SKIP_SUITE_HANDLER = ['skip', 'todo'];
export function setupTestCollector(ctx) {
    const currentSuites = [];
    const getCurrentSuite = () => currentSuites[currentSuites.length - 1];
    const createSuite = (title, flag, parentSuite) => {
        const suite = {
            id: nanoid(),
            title,
            allTitles: [...parentSuite?.allTitles ?? [], title],
            filePath: ctx.options.entry,
            children: [],
            childrenToRun: [],
            parent: parentSuite,
            flag,
            beforeAllHandlers: [],
            beforeEachHandlers: [],
            afterAllHandlers: [],
            afterEachHandlers: [],
            ranTests: [],
            testErrors: 0,
            otherErrors: [],
        };
        return suite;
    };
    const createRootSuite = () => {
        const title = slugify(basename(ctx.options.entry, extname(ctx.options.entry)))
            .replace(/\.(test|spec)/g, '')
            .replace(/\./g, '-');
        return createSuite(title, null, null);
    };
    const rootSuite = createRootSuite();
    currentSuites.push(rootSuite);
    ctx.suites.push(rootSuite);
    const addTest = (title, handler, flag = null) => {
        getCurrentSuite().children.push([
            'test',
            {
                id: nanoid(),
                title,
                handler,
                error: null,
                flag,
                failedSnapshots: 0,
                snapshots: [],
            },
        ]);
    };
    const addSuite = (title, handler, flag = null) => {
        const parentSuite = getCurrentSuite();
        const suite = createSuite(title, flag, parentSuite);
        if (parentSuite) {
            parentSuite.children.push(['suite', suite]);
        }
        currentSuites.push(suite);
        if (handler && !SKIP_SUITE_HANDLER.includes(flag)) {
            handler();
        }
        currentSuites.pop();
    };
    const describe = Object.assign(function describe(title, handler) {
        addSuite(title, handler);
    }, {
        skip: (title, handler) => {
            addSuite(title, handler, 'skip');
        },
        only: (title, handler) => {
            addSuite(title, handler, 'only');
        },
        todo: (title, handler) => {
            addSuite(title, handler, 'todo');
        },
    });
    const test = Object.assign(function test(title, handler) {
        addTest(title, handler);
    }, {
        skip: (title, handler) => {
            addTest(title, handler, 'skip');
        },
        only: (title, handler) => {
            addTest(title, handler, 'only');
        },
        todo: (title, handler) => {
            addTest(title, handler, 'todo');
        },
    });
    function beforeAll(handler) {
        getCurrentSuite().beforeAllHandlers.push(handler);
    }
    function afterAll(handler) {
        getCurrentSuite().afterAllHandlers.push(handler);
    }
    function beforeEach(handler) {
        getCurrentSuite().beforeEachHandlers.push(handler);
    }
    function afterEach(handler) {
        getCurrentSuite().afterEachHandlers.push(handler);
    }
    /**
     * Run the suite handlers to register suites and tests.
     * Shouldn't be exposed to the test files.
     */
    async function collect() {
        filterChildrenToRun(rootSuite);
        toMainThread().onCollected([
            mapSuite(rootSuite),
        ]);
    }
    return {
        exposed: {
            describe,
            test,
            beforeAll,
            afterAll,
            beforeEach,
            afterEach,
        },
        collect,
    };
}
function filterChildrenToRun(suite) {
    let childrenToRun;
    const onlyChildren = suite.children.filter(([, t]) => t.flag === 'only');
    if (onlyChildren.length) {
        childrenToRun = onlyChildren;
    }
    else {
        childrenToRun = suite.children.filter(([, t]) => t.flag !== 'skip' && t.flag !== 'todo');
    }
    suite.childrenToRun = childrenToRun;
    for (const child of suite.children) {
        if (child[0] === 'suite') {
            filterChildrenToRun(child[1]);
        }
    }
}
function mapSuite(suite) {
    return {
        id: suite.id,
        title: suite.title,
        allTitles: suite.allTitles,
        flag: suite.flag,
        children: suite.children.map(child => {
            if (child[0] === 'suite') {
                return ['suite', mapSuite(child[1])];
            }
            else if (child[0] === 'test') {
                return ['test', mapTest(child[1])];
            }
            return null;
        }),
        filePath: suite.filePath,
        runTestCount: suite.childrenToRun.filter(c => c[0] === 'test').length,
    };
}
function mapTest(test) {
    return {
        id: test.id,
        title: test.title,
        flag: test.flag,
    };
}
