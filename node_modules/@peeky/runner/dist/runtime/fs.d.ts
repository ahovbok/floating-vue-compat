/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import fs from 'fs';
export declare const realFs: {
    promises: {
        access(path: fs.PathLike, mode?: number): Promise<void>;
        copyFile(src: fs.PathLike, dest: fs.PathLike, flags?: number): Promise<void>;
        open(path: fs.PathLike, flags: string | number, mode?: fs.Mode): Promise<fs.promises.FileHandle>;
        read<TBuffer extends Uint8Array>(handle: fs.promises.FileHandle, buffer: TBuffer, offset?: number, length?: number, position?: number): Promise<{
            bytesRead: number;
            buffer: TBuffer;
        }>;
        write<TBuffer_1 extends Uint8Array>(handle: fs.promises.FileHandle, buffer: TBuffer_1, offset?: number, length?: number, position?: number): Promise<{
            bytesWritten: number;
            buffer: TBuffer_1;
        }>;
        write(handle: fs.promises.FileHandle, string: string, position?: number, encoding?: BufferEncoding): Promise<{
            bytesWritten: number;
            buffer: string;
        }>;
        rename(oldPath: fs.PathLike, newPath: fs.PathLike): Promise<void>;
        truncate(path: fs.PathLike, len?: number): Promise<void>;
        ftruncate(handle: fs.promises.FileHandle, len?: number): Promise<void>;
        rmdir(path: fs.PathLike, options?: fs.RmDirOptions): Promise<void>;
        rm(path: fs.PathLike, options?: fs.RmOptions): Promise<void>;
        fdatasync(handle: fs.promises.FileHandle): Promise<void>;
        fsync(handle: fs.promises.FileHandle): Promise<void>;
        mkdir(path: fs.PathLike, options: fs.MakeDirectoryOptions & {
            recursive: true;
        }): Promise<string>;
        mkdir(path: fs.PathLike, options?: fs.Mode | (fs.MakeDirectoryOptions & {
            recursive?: false;
        })): Promise<void>;
        mkdir(path: fs.PathLike, options?: fs.Mode | fs.MakeDirectoryOptions): Promise<string>;
        readdir(path: fs.PathLike, options?: BufferEncoding | (fs.BaseEncodingOptions & {
            withFileTypes?: false;
        })): Promise<string[]>;
        readdir(path: fs.PathLike, options: "buffer" | {
            encoding: "buffer";
            withFileTypes?: false;
        }): Promise<Buffer[]>;
        readdir(path: fs.PathLike, options?: BufferEncoding | (fs.BaseEncodingOptions & {
            withFileTypes?: false;
        })): Promise<string[] | Buffer[]>;
        readdir(path: fs.PathLike, options: fs.BaseEncodingOptions & {
            withFileTypes: true;
        }): Promise<fs.Dirent[]>;
        readlink(path: fs.PathLike, options?: BufferEncoding | fs.BaseEncodingOptions): Promise<string>;
        readlink(path: fs.PathLike, options: fs.BufferEncodingOption): Promise<Buffer>;
        readlink(path: fs.PathLike, options?: string | fs.BaseEncodingOptions): Promise<string | Buffer>;
        symlink(target: fs.PathLike, path: fs.PathLike, type?: string): Promise<void>;
        lstat(path: fs.PathLike, opts?: fs.StatOptions & {
            bigint?: false;
        }): Promise<fs.Stats>;
        lstat(path: fs.PathLike, opts: fs.StatOptions & {
            bigint: true;
        }): Promise<fs.BigIntStats>;
        lstat(path: fs.PathLike, opts?: fs.StatOptions): Promise<fs.Stats | fs.BigIntStats>;
        stat(path: fs.PathLike, opts?: fs.StatOptions & {
            bigint?: false;
        }): Promise<fs.Stats>;
        stat(path: fs.PathLike, opts: fs.StatOptions & {
            bigint: true;
        }): Promise<fs.BigIntStats>;
        stat(path: fs.PathLike, opts?: fs.StatOptions): Promise<fs.Stats | fs.BigIntStats>;
        link(existingPath: fs.PathLike, newPath: fs.PathLike): Promise<void>;
        unlink(path: fs.PathLike): Promise<void>;
        fchmod(handle: fs.promises.FileHandle, mode: fs.Mode): Promise<void>;
        chmod(path: fs.PathLike, mode: fs.Mode): Promise<void>;
        lchmod(path: fs.PathLike, mode: fs.Mode): Promise<void>;
        lchown(path: fs.PathLike, uid: number, gid: number): Promise<void>;
        lutimes(path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;
        fchown(handle: fs.promises.FileHandle, uid: number, gid: number): Promise<void>;
        chown(path: fs.PathLike, uid: number, gid: number): Promise<void>;
        utimes(path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;
        futimes(handle: fs.promises.FileHandle, atime: string | number | Date, mtime: string | number | Date): Promise<void>;
        realpath(path: fs.PathLike, options?: BufferEncoding | fs.BaseEncodingOptions): Promise<string>;
        realpath(path: fs.PathLike, options: fs.BufferEncodingOption): Promise<Buffer>;
        realpath(path: fs.PathLike, options?: BufferEncoding | fs.BaseEncodingOptions): Promise<string | Buffer>;
        mkdtemp(prefix: string, options?: BufferEncoding | fs.BaseEncodingOptions): Promise<string>;
        mkdtemp(prefix: string, options: fs.BufferEncodingOption): Promise<Buffer>;
        mkdtemp(prefix: string, options?: BufferEncoding | fs.BaseEncodingOptions): Promise<string | Buffer>;
        writeFile(path: fs.PathLike | fs.promises.FileHandle, data: string | Uint8Array, options?: BufferEncoding | (fs.BaseEncodingOptions & {
            mode?: fs.Mode;
            flag?: fs.OpenMode;
        })): Promise<void>;
        appendFile(path: fs.PathLike | fs.promises.FileHandle, data: string | Uint8Array, options?: BufferEncoding | (fs.BaseEncodingOptions & {
            mode?: fs.Mode;
            flag?: fs.OpenMode;
        })): Promise<void>;
        readFile(path: fs.PathLike | fs.promises.FileHandle, options?: {
            encoding?: null;
            flag?: fs.OpenMode;
        }): Promise<Buffer>;
        readFile(path: fs.PathLike | fs.promises.FileHandle, options: BufferEncoding | {
            encoding: BufferEncoding;
            flag?: fs.OpenMode;
        }): Promise<string>;
        readFile(path: fs.PathLike | fs.promises.FileHandle, options?: BufferEncoding | (fs.BaseEncodingOptions & {
            flag?: fs.OpenMode;
        })): Promise<string | Buffer>;
        opendir(path: fs.PathLike, options?: fs.OpenDirOptions): Promise<fs.Dir>;
    };
    rename: typeof fs.rename;
    renameSync(oldPath: fs.PathLike, newPath: fs.PathLike): void;
    truncate: typeof fs.truncate;
    truncateSync(path: fs.PathLike, len?: number): void;
    ftruncate: typeof fs.ftruncate;
    ftruncateSync(fd: number, len?: number): void;
    chown: typeof fs.chown;
    chownSync(path: fs.PathLike, uid: number, gid: number): void;
    fchown: typeof fs.fchown;
    fchownSync(fd: number, uid: number, gid: number): void;
    lchown: typeof fs.lchown;
    lchownSync(path: fs.PathLike, uid: number, gid: number): void;
    lutimes: typeof fs.lutimes;
    lutimesSync(path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date): void;
    chmod: typeof fs.chmod;
    chmodSync(path: fs.PathLike, mode: fs.Mode): void;
    fchmod: typeof fs.fchmod;
    fchmodSync(fd: number, mode: fs.Mode): void;
    lchmod: typeof fs.lchmod;
    lchmodSync(path: fs.PathLike, mode: fs.Mode): void;
    stat: typeof fs.stat;
    statSync(path: fs.PathLike, options?: fs.StatOptions & {
        bigint?: false;
    }): fs.Stats;
    statSync(path: fs.PathLike, options: fs.StatOptions & {
        bigint: true;
    }): fs.BigIntStats;
    statSync(path: fs.PathLike, options?: fs.StatOptions): fs.Stats | fs.BigIntStats;
    fstat: typeof fs.fstat;
    fstatSync(fd: number, options?: fs.StatOptions & {
        bigint?: false;
    }): fs.Stats;
    fstatSync(fd: number, options: fs.StatOptions & {
        bigint: true;
    }): fs.BigIntStats;
    fstatSync(fd: number, options?: fs.StatOptions): fs.Stats | fs.BigIntStats;
    lstat: typeof fs.lstat;
    lstatSync(path: fs.PathLike, options?: fs.StatOptions & {
        bigint?: false;
    }): fs.Stats;
    lstatSync(path: fs.PathLike, options: fs.StatOptions & {
        bigint: true;
    }): fs.BigIntStats;
    lstatSync(path: fs.PathLike, options?: fs.StatOptions): fs.Stats | fs.BigIntStats;
    link: typeof fs.link;
    linkSync(existingPath: fs.PathLike, newPath: fs.PathLike): void;
    symlink: typeof fs.symlink;
    symlinkSync(target: fs.PathLike, path: fs.PathLike, type?: fs.symlink.Type): void;
    readlink: typeof fs.readlink;
    readlinkSync(path: fs.PathLike, options?: BufferEncoding | fs.BaseEncodingOptions): string;
    readlinkSync(path: fs.PathLike, options: fs.BufferEncodingOption): Buffer;
    readlinkSync(path: fs.PathLike, options?: string | fs.BaseEncodingOptions): string | Buffer;
    realpath: typeof fs.realpath;
    realpathSync: typeof fs.realpathSync;
    unlink: typeof fs.unlink;
    unlinkSync(path: fs.PathLike): void;
    rmdir: typeof fs.rmdir;
    rmdirSync(path: fs.PathLike, options?: fs.RmDirOptions): void;
    rm: typeof fs.rm;
    rmSync(path: fs.PathLike, options?: fs.RmOptions): void;
    mkdir: typeof fs.mkdir;
    mkdirSync(path: fs.PathLike, options: fs.MakeDirectoryOptions & {
        recursive: true;
    }): string;
    mkdirSync(path: fs.PathLike, options?: fs.Mode | (fs.MakeDirectoryOptions & {
        recursive?: false;
    })): void;
    mkdirSync(path: fs.PathLike, options?: fs.Mode | fs.MakeDirectoryOptions): string;
    mkdtemp: typeof fs.mkdtemp;
    mkdtempSync(prefix: string, options?: BufferEncoding | fs.BaseEncodingOptions): string;
    mkdtempSync(prefix: string, options: fs.BufferEncodingOption): Buffer;
    mkdtempSync(prefix: string, options?: string | fs.BaseEncodingOptions): string | Buffer;
    readdir: typeof fs.readdir;
    readdirSync(path: fs.PathLike, options?: BufferEncoding | {
        encoding: BufferEncoding;
        withFileTypes?: false;
    }): string[];
    readdirSync(path: fs.PathLike, options: "buffer" | {
        encoding: "buffer";
        withFileTypes?: false;
    }): Buffer[];
    readdirSync(path: fs.PathLike, options?: BufferEncoding | (fs.BaseEncodingOptions & {
        withFileTypes?: false;
    })): string[] | Buffer[];
    readdirSync(path: fs.PathLike, options: fs.BaseEncodingOptions & {
        withFileTypes: true;
    }): fs.Dirent[];
    close: typeof fs.close;
    closeSync(fd: number): void;
    open: typeof fs.open;
    openSync(path: fs.PathLike, flags: fs.OpenMode, mode?: fs.Mode): number;
    utimes: typeof fs.utimes;
    utimesSync(path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date): void;
    futimes: typeof fs.futimes;
    futimesSync(fd: number, atime: string | number | Date, mtime: string | number | Date): void;
    fsync: typeof fs.fsync;
    fsyncSync(fd: number): void;
    write: typeof fs.write;
    writeSync(fd: number, buffer: NodeJS.ArrayBufferView, offset?: number, length?: number, position?: number): number;
    writeSync(fd: number, string: string, position?: number, encoding?: BufferEncoding): number;
    read: typeof fs.read;
    readSync(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: number): number;
    readSync(fd: number, buffer: NodeJS.ArrayBufferView, opts?: fs.ReadSyncOptions): number;
    readFile: typeof fs.readFile;
    readFileSync(path: number | fs.PathLike, options?: {
        encoding?: null;
        flag?: string;
    }): Buffer;
    readFileSync(path: number | fs.PathLike, options: BufferEncoding | {
        encoding: BufferEncoding;
        flag?: string;
    }): string;
    readFileSync(path: number | fs.PathLike, options?: BufferEncoding | (fs.BaseEncodingOptions & {
        flag?: string;
    })): string | Buffer;
    writeFile: typeof fs.writeFile;
    writeFileSync(path: number | fs.PathLike, data: string | NodeJS.ArrayBufferView, options?: fs.WriteFileOptions): void;
    appendFile: typeof fs.appendFile;
    appendFileSync(file: number | fs.PathLike, data: string | Uint8Array, options?: fs.WriteFileOptions): void;
    watchFile(filename: fs.PathLike, options: {
        persistent?: boolean;
        interval?: number;
    }, listener: (curr: fs.Stats, prev: fs.Stats) => void): void;
    watchFile(filename: fs.PathLike, listener: (curr: fs.Stats, prev: fs.Stats) => void): void;
    unwatchFile(filename: fs.PathLike, listener?: (curr: fs.Stats, prev: fs.Stats) => void): void;
    watch(filename: fs.PathLike, options: {
        encoding?: BufferEncoding;
        persistent?: boolean;
        recursive?: boolean;
    } | BufferEncoding, listener?: (event: "rename" | "change", filename: string) => void): fs.FSWatcher;
    watch(filename: fs.PathLike, options: {
        encoding: "buffer";
        persistent?: boolean;
        recursive?: boolean;
    } | "buffer", listener?: (event: "rename" | "change", filename: Buffer) => void): fs.FSWatcher;
    watch(filename: fs.PathLike, options: string | {
        encoding?: BufferEncoding;
        persistent?: boolean;
        recursive?: boolean;
    }, listener?: (event: "rename" | "change", filename: string | Buffer) => void): fs.FSWatcher;
    watch(filename: fs.PathLike, listener?: (event: "rename" | "change", filename: string) => any): fs.FSWatcher;
    exists: typeof fs.exists;
    existsSync(path: fs.PathLike): boolean;
    access: typeof fs.access;
    accessSync(path: fs.PathLike, mode?: number): void;
    createReadStream(path: fs.PathLike, options?: BufferEncoding | {
        flags?: string;
        encoding?: BufferEncoding;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        emitClose?: boolean;
        start?: number;
        end?: number;
        highWaterMark?: number;
    }): fs.ReadStream;
    createWriteStream(path: fs.PathLike, options?: BufferEncoding | {
        flags?: string;
        encoding?: BufferEncoding;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        emitClose?: boolean;
        start?: number;
        highWaterMark?: number;
    }): fs.WriteStream;
    fdatasync: typeof fs.fdatasync;
    fdatasyncSync(fd: number): void;
    copyFile: typeof fs.copyFile;
    copyFileSync(src: fs.PathLike, dest: fs.PathLike, flags?: number): void;
    writev: typeof fs.writev;
    writevSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number;
    readv: typeof fs.readv;
    readvSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number;
    opendirSync(path: fs.PathLike, options?: fs.OpenDirOptions): fs.Dir;
    opendir: typeof fs.opendir;
    Stats: typeof fs.Stats;
    Dirent: typeof fs.Dirent;
    Dir: typeof fs.Dir;
    ReadStream: typeof fs.ReadStream;
    WriteStream: typeof fs.WriteStream;
    constants: typeof fs.constants;
    BigIntStats: typeof fs.BigIntStats;
};
export declare function createMockedFileSystem(): any;
