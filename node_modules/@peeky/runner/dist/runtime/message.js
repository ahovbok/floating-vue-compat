import { nanoid } from 'nanoid';
// Channel
let workerPort;
export function initWorkerMessaging(port) {
    workerPort = port;
    workerPort.on('message', (message) => {
        const promise = toMainPromiseMap?.get(message.id);
        if (promise) {
            if ('error' in message) {
                promise.reject(message.error);
            }
            else {
                promise.resolve(message.result);
            }
        }
    });
}
// Remote Methods
let toMainProxy;
let toMainPromiseMap = new Map();
export function toMainThread() {
    if (!toMainProxy) {
        toMainPromiseMap = new Map();
        toMainProxy = new Proxy({}, {
            get: (target, method) => {
                return (...args) => {
                    const id = nanoid();
                    const promise = !method.startsWith('on')
                        ? new Promise((resolve, reject) => {
                            toMainPromiseMap.set(id, { resolve, reject });
                        })
                        : undefined;
                    workerPort.postMessage({ id, method, args });
                    return promise;
                };
            },
        });
    }
    return toMainProxy;
}
